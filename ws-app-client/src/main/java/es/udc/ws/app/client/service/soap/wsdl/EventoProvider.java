
package es.udc.ws.app.client.service.soap.wsdl;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "EventoProvider", targetNamespace = "http://soap.ws.udc.es/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface EventoProvider {


    /**
     * 
     * @param idUsuario
     * @param idEvento
     * @param respuesta
     * @return
     *     returns java.util.List<es.udc.ws.app.client.service.soap.wsdl.RespuestaDto>
     * @throws InputValidationException_Exception
     * @throws InstanceNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findRespuestas", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.FindRespuestas")
    @ResponseWrapper(localName = "findRespuestasResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.FindRespuestasResponse")
    @Action(input = "http://soap.ws.udc.es/EventoProvider/findRespuestasRequest", output = "http://soap.ws.udc.es/EventoProvider/findRespuestasResponse", fault = {
        @FaultAction(className = InputValidationException_Exception.class, value = "http://soap.ws.udc.es/EventoProvider/findRespuestas/Fault/InputValidationException"),
        @FaultAction(className = InstanceNotFoundException_Exception.class, value = "http://soap.ws.udc.es/EventoProvider/findRespuestas/Fault/InstanceNotFoundException")
    })
    public List<RespuestaDto> findRespuestas(
        @WebParam(name = "idUsuario", targetNamespace = "")
        Long idUsuario,
        @WebParam(name = "idEvento", targetNamespace = "")
        Long idEvento,
        @WebParam(name = "respuesta", targetNamespace = "")
        Boolean respuesta)
        throws InputValidationException_Exception, InstanceNotFoundException_Exception
    ;

    /**
     * 
     * @param eventoDto
     * @return
     *     returns java.lang.Long
     * @throws SoapInputValidationException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addEvento", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.AddEvento")
    @ResponseWrapper(localName = "addEventoResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.AddEventoResponse")
    @Action(input = "http://soap.ws.udc.es/EventoProvider/addEventoRequest", output = "http://soap.ws.udc.es/EventoProvider/addEventoResponse", fault = {
        @FaultAction(className = SoapInputValidationException.class, value = "http://soap.ws.udc.es/EventoProvider/addEvento/Fault/SoapInputValidationException")
    })
    public Long addEvento(
        @WebParam(name = "eventoDto", targetNamespace = "")
        EventoDto eventoDto)
        throws SoapInputValidationException
    ;

    /**
     * 
     * @param idEvento
     * @return
     *     returns es.udc.ws.app.client.service.soap.wsdl.EventoDto
     * @throws SoapInstanceNotFoundException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findEvento", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.FindEvento")
    @ResponseWrapper(localName = "findEventoResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.FindEventoResponse")
    @Action(input = "http://soap.ws.udc.es/EventoProvider/findEventoRequest", output = "http://soap.ws.udc.es/EventoProvider/findEventoResponse", fault = {
        @FaultAction(className = SoapInstanceNotFoundException.class, value = "http://soap.ws.udc.es/EventoProvider/findEvento/Fault/SoapInstanceNotFoundException")
    })
    public EventoDto findEvento(
        @WebParam(name = "IdEvento", targetNamespace = "")
        Long idEvento)
        throws SoapInstanceNotFoundException
    ;

    /**
     * 
     * @param idEvento
     * @throws SoapInstanceNotFoundException
     */
    @WebMethod
    @RequestWrapper(localName = "removeEvento", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.RemoveEvento")
    @ResponseWrapper(localName = "removeEventoResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.RemoveEventoResponse")
    @Action(input = "http://soap.ws.udc.es/EventoProvider/removeEventoRequest", output = "http://soap.ws.udc.es/EventoProvider/removeEventoResponse", fault = {
        @FaultAction(className = SoapInstanceNotFoundException.class, value = "http://soap.ws.udc.es/EventoProvider/removeEvento/Fault/SoapInstanceNotFoundException")
    })
    public void removeEvento(
        @WebParam(name = "IdEvento", targetNamespace = "")
        Long idEvento)
        throws SoapInstanceNotFoundException
    ;

    /**
     * 
     * @param eventoDto
     * @throws SoapInstanceNotFoundException
     * @throws SoapInputValidationException
     */
    @WebMethod
    @RequestWrapper(localName = "updateEvento", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.UpdateEvento")
    @ResponseWrapper(localName = "updateEventoResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.UpdateEventoResponse")
    @Action(input = "http://soap.ws.udc.es/EventoProvider/updateEventoRequest", output = "http://soap.ws.udc.es/EventoProvider/updateEventoResponse", fault = {
        @FaultAction(className = SoapInputValidationException.class, value = "http://soap.ws.udc.es/EventoProvider/updateEvento/Fault/SoapInputValidationException"),
        @FaultAction(className = SoapInstanceNotFoundException.class, value = "http://soap.ws.udc.es/EventoProvider/updateEvento/Fault/SoapInstanceNotFoundException")
    })
    public void updateEvento(
        @WebParam(name = "eventoDto", targetNamespace = "")
        EventoDto eventoDto)
        throws SoapInputValidationException, SoapInstanceNotFoundException
    ;

    /**
     * 
     * @param keywords
     * @param fechaInicio
     * @param fechaFin
     * @return
     *     returns java.util.List<es.udc.ws.app.client.service.soap.wsdl.EventoDto>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findEventos", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.FindEventos")
    @ResponseWrapper(localName = "findEventosResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.FindEventosResponse")
    @Action(input = "http://soap.ws.udc.es/EventoProvider/findEventosRequest", output = "http://soap.ws.udc.es/EventoProvider/findEventosResponse")
    public List<EventoDto> findEventos(
        @WebParam(name = "keywords", targetNamespace = "")
        String keywords,
        @WebParam(name = "fechaInicio", targetNamespace = "")
        XMLGregorianCalendar fechaInicio,
        @WebParam(name = "fechaFin", targetNamespace = "")
        XMLGregorianCalendar fechaFin);

    /**
     * 
     * @param respuestaDto
     * @return
     *     returns java.lang.Long
     * @throws SoapInstanceNotFoundException
     * @throws SoapInputValidationException
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "responder", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.Responder")
    @ResponseWrapper(localName = "responderResponse", targetNamespace = "http://soap.ws.udc.es/", className = "es.udc.ws.app.client.service.soap.wsdl.ResponderResponse")
    @Action(input = "http://soap.ws.udc.es/EventoProvider/responderRequest", output = "http://soap.ws.udc.es/EventoProvider/responderResponse", fault = {
        @FaultAction(className = SoapInputValidationException.class, value = "http://soap.ws.udc.es/EventoProvider/responder/Fault/SoapInputValidationException"),
        @FaultAction(className = SoapInstanceNotFoundException.class, value = "http://soap.ws.udc.es/EventoProvider/responder/Fault/SoapInstanceNotFoundException")
    })
    public Long responder(
        @WebParam(name = "respuestaDto", targetNamespace = "")
        RespuestaDto respuestaDto)
        throws SoapInputValidationException, SoapInstanceNotFoundException
    ;

}
